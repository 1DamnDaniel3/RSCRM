CREATE TABLE leads (
    lead_id SERIAL PRIMARY KEY,
    group_id INT,
    first_name VARCHAR,
    second_name VARCHAR,
    phone VARCHAR,
    qualification TEXT,
    trial_date VARCHAR
    FOREIGN KEY (group_id) REFERENCES groups(group_id) ON DELETE SET NULL
);

CREATE TABLE clients (
    client_id SERIAL PRIMARY KEY,
    group_id INTEGER,
    first_name VARCHAR NOT NULL,
    last_name VARCHAR,
    patronymic VARCHAR,
    join_date DATE NOT NULL,
    birthdate DATE,
    email VARCHAR UNIQUE,
    address TEXT,
    emergency_contact_name VARCHAR,
    emergency_contact_phone VARCHAR,
    contacts TEXT,
    FOREIGN KEY (group_id) REFERENCES groups(group_id) ON DELETE SET NULL
);

CREATE TABLE abonements (
    abon_id SERIAL PRIMARY KEY,
    abon_type VARCHAR,
    abon_cost VARCHAR,
    sessions INT
);

CREATE TABLE groups (
    group_id SERIAL PRIMARY KEY,
    group_name VARCHAR
);

-- Вставка группы по умолчанию
INSERT INTO groups (group_name) VALUES ('Неопределённые') RETURNING group_id;

CREATE TABLE entity_groups (
    entity_group_id SERIAL PRIMARY KEY,
    entity_type VARCHAR(50) NOT NULL,
    group_id INTEGER NOT NULL,
    FOREIGN KEY (group_id) REFERENCES groups(group_id) ON DELETE CASCADE
);

INSERT INTO entity_groups (entity_type, group_id) VALUES ('clients', 1);
INSERT INTO entity_groups (entity_type, group_id) VALUES ('students', 1);
INSERT INTO entity_groups (entity_type, group_id) VALUES ('leads', 1);

CREATE TABLE weekday(
    weekday_id SERIAL PRIMARY KEY,
    weekday_name VARCHAR
);

INSERT INTO weekday(weekday_name) VALUES
	('Понедельник'),
	('Вторник'),
	('Среда'),
	('Четверг'),
	('Пятница'),
	('Суббота'),
	('Воскресенье');

CREATE TABLE weekday_groups (
    wkd_id SERIAL PRIMARY KEY,
    weekday_id INT,
    group_id INT,
    FOREIGN KEY (weekday_id) REFERENCES weekday(weekday_id) ON DELETE CASCADE,
    FOREIGN KEY (group_id) REFERENCES groups(group_id) ON DELETE CASCADE
);

CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    user_type VARCHAR,
    second_name VARCHAR,
    first_name VARCHAR,
    patronymic VARCHAR,
    pasport_data VARCHAR NOT NULL UNIQUE,
    phone VARCHAR NOT NULL,
    salary VARCHAR,
    hiredate VARCHAR,
    email VARCHAR NOT NULL UNIQUE,
    password VARCHAR NOT NULL
);

CREATE TABLE user_tokens (
    token_id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL,
    token VARCHAR NOT NULL,
    refresh_token VARCHAR NOT NULL,
    expires_at TIMESTAMP NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

CREATE TABLE students (
    stud_id SERIAL PRIMARY KEY,
    client_id INT,
    group_id INT,
    second_name VARCHAR,
    first_name VARCHAR,
    patronymic VARCHAR,
    phone VARCHAR,
    birthdate VARCHAR,
    hiredate VARCHAR,
    FOREIGN KEY (client_id) REFERENCES clients(client_id) ON DELETE CASCADE,
    FOREIGN KEY (group_id) REFERENCES groups(group_id) ON DELETE CASCADE
);

CREATE TABLE students_abonements (
    stud_abon_id SERIAL PRIMARY KEY,
    stud_id INT NOT NULL,
    abon_id INT NOT NULL,
    status VARCHAR DEFAULT 'active',
    start_date DATE,
    end_date DATE,
    FOREIGN KEY (stud_id) REFERENCES students(stud_id) ON DELETE CASCADE,
    FOREIGN KEY (abon_id) REFERENCES abonements(abon_id) ON DELETE CASCADE
);

CREATE TABLE fix_abonements (
    fix_id SERIAL PRIMARY KEY,
    stud_abon_id INTEGER NOT NULL,
    start_fix_date DATE NOT NULL,
    end_fix_date DATE,
    FOREIGN KEY (stud_abon_id) REFERENCES students_abonements(stud_abon_id) ON DELETE CASCADE
);

CREATE TABLE payment (
    payment_id SERIAL PRIMARY KEY,
    abon_id INT NOT NULL,
    client_id INT NOT NULL,
    payment_date DATE NOT NULL,
    FOREIGN KEY (abon_id) REFERENCES abonements(abon_id) ON DELETE CASCADE,
    FOREIGN KEY (client_id) REFERENCES clients(client_id) ON DELETE CASCADE
);

CREATE TABLE event (
    event_id SERIAL PRIMARY KEY,
    event_type VARCHAR
);

CREATE TABLE authorisation (
    authorisation_id SERIAL PRIMARY KEY,
    user_id INT,
    event_id INT,
    date_time DATE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (event_id) REFERENCES event(event_id) ON DELETE CASCADE
);

CREATE TABLE classes(
    class_id SERIAL PRIMARY KEY,
    stud_id INT,
    user_id INT,
    class_date VARCHAR,
    class_time VARCHAR,
    FOREIGN KEY (stud_id) REFERENCES students(stud_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

CREATE TABLE attendance (
    attendance_id SERIAL PRIMARY KEY,
    stud_id INT,
    attendance_date VARCHAR,
    FOREIGN KEY (stud_id) REFERENCES students(stud_id) ON DELETE CASCADE
);
